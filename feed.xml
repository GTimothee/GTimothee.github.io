<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://gtimothee.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://gtimothee.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-10-31T07:40:02+00:00</updated><id>https://gtimothee.github.io/feed.xml</id><title type="html">blank</title><subtitle></subtitle><entry><title type="html">How to write your own keyword retriever in 5 minutes</title><link href="https://gtimothee.github.io/blog/2024/homemade-keyword-retriever/" rel="alternate" type="text/html" title="How to write your own keyword retriever in 5 minutes"/><published>2024-10-24T00:00:00+00:00</published><updated>2024-10-24T00:00:00+00:00</updated><id>https://gtimothee.github.io/blog/2024/homemade-keyword-retriever</id><content type="html" xml:base="https://gtimothee.github.io/blog/2024/homemade-keyword-retriever/"><![CDATA[<blockquote> <p>In this blog post I show you how I build a simple yet efficient keyword retriever for a RAG system, using the whoosh library.</p> </blockquote> <h2 id="motivation">Motivation</h2> <p>I found myself building a RAG system for question answering, and it is not as easy as you might think.</p> <p>The main problem comes when dealing with technical documentation. Implementing a similarity search-based RAG will not help you much. Firstly, the embedding model does not know the keywords, so it cannot embed them properly. Secondly, when a user asks a question, the text is rarely “similar” to the chunk that contains the answer, if that makes sense.</p> <p>Although it does not solve all your problems, a first step towards improving your RAG in this setting is well known: you shall add a keyword retriever in addition to the similarity search-based retriever, as the both of them are complementary.</p> <p>This post will be useful for you in at least two ways: if you are curious about how a keyword retriever works in practice, and if, like me, you are using a database that does not have a keyword retriever included. Some might argue that I could have use the retriever from langchain but from what I understood it either loads all the documents in memory (not optimal) or needs elasticsearch as a backend, which my team and I did not want to do, as we weren’t using it for anything else in the project at hand.</p> <h2 id="whoosh">Whoosh</h2> <p><a href="https://github.com/mchaput/whoosh">Whoosh</a> is a fast, pure Python search engine library designed for adding search functionality to applications. It’s often used for indexing and searching textual data within Python applications, and it’s popular in cases where a lightweight, easy-to-integrate search solution is required.</p> <p>Key Features of Whoosh:</p> <ul> <li>Written in Pure Python: Whoosh is implemented entirely in Python, which makes it easy to install and run without external dependencies or a specific backend.</li> <li>Full-Text Search: It provides full-text search capabilities, including indexing and retrieving text-based data efficiently.</li> <li>Customizable: Whoosh is highly flexible and allows developers to customize search functionality with features like tokenizers, filters, and analyzers.</li> <li>Simple Integration: Whoosh is lightweight and can be embedded directly into Python applications without the need for external services, making it ideal for smaller-scale applications.</li> <li>Phrase and Boolean Search: Supports phrase searches, Boolean operators (AND, OR, NOT), and other advanced search features.</li> </ul> <p>Important note about Whoosh: It is now unmaintained, so you may want to use <a href="https://github.com/Sygil-Dev/whoosh-reloaded">“Whoosh Reloaded”</a> instead, a fork and continuation of the Whoosh project, which is actively maintained. The code I will give here works for Whoosh as well as for Whoosh Reloaded.</p> <h2 id="steps-for-building-our-retriever">Steps for building our retriever</h2> <p>// in progress</p> <h2 id="conclusion">Conclusion</h2> <p>// in progress</p> <p>Medium link:</p>]]></content><author><name></name></author><category term="rag"/><category term="keyword-retriever"/><category term="rag"/><category term="whoosh"/><category term="python"/><summary type="html"><![CDATA[Tutorial on how to write your own keyword retriever using the whoosh library]]></summary></entry><entry><title type="html">Test procedure and metrics for RAG in 5 minutes</title><link href="https://gtimothee.github.io/blog/2024/simple-test-procedure-for-rag/" rel="alternate" type="text/html" title="Test procedure and metrics for RAG in 5 minutes"/><published>2024-10-04T00:00:00+00:00</published><updated>2024-10-04T00:00:00+00:00</updated><id>https://gtimothee.github.io/blog/2024/simple-test-procedure-for-rag</id><content type="html" xml:base="https://gtimothee.github.io/blog/2024/simple-test-procedure-for-rag/"><![CDATA[<blockquote> <p>In this blog post I show you how I build my simple evaluation procedure for a basic Q/A RAG system without use of external library or anything fancy. All you need is… an existing RAG system and to have access to an LLM. I also introduce two metrics I usually use to evaluate RAG systems, which are simple, quite robust, and easily interpretable in my opinion: completeness and conciseness.</p> </blockquote> <h2 id="motivation">Motivation</h2> <p><em>When you work in R&amp;D like me, you have limited time to build a PoC.</em> When working on RAG systems and AI agents in general, it is already a pain to select your tools, learn how to use them and build something robust. I will not explain you why you also need to evaluate the system, as it is pretty obvious.</p> <p><em>So you are faced with the following problem</em>: How do I focus on what I build, while also evaluating my RAG system fast, and in such a way that I can rapidly debug/improve the system. And the speed and interpretability criteria are key, in my opinion. In this blog post I show you how to build such system very fast, for rapid prototyping, without having to benchmark, test or dive into complicated frameworks with lots of metrics and settings. My solution is not fancy or complicated, but that is the whole point of it. If your PoC gets validated, you will have plenty of time to select a good RAG testing framework like RAGAS, spend time on elaborating advanced datasets, setup automated testing, etc. (I may dive into these advanced topics in future posts)</p> <h2 id="step-1--dataset-generation">Step 1 — Dataset generation</h2> <p>The dataset generation part is pretty simple. Go over each document chunk of your database and generate a question/answer pair for each chunk with the help of an LLM. Keep track of the chunk used for generation so that we can evaluate the RAG performance later. In other words, output a triple (question, answer, chunk) for each chunk.</p> <p>Here is a piece of code that does just that:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">SYSTEM_PROMPT</span> <span class="o">=</span> <span class="sh">"""</span><span class="s">You are an AI teacher, writing an exam out of course material.
Your task is to generate a (question, answer) pair from a given chunk from the course that is given to you.  
Return a JSON object with two keys:
- </span><span class="sh">'</span><span class="s">question</span><span class="sh">'</span><span class="s">: a question generated from the given chunk
- </span><span class="sh">'</span><span class="s">answer</span><span class="sh">'</span><span class="s">: the answer to the question
Just return the JSON, without any premamble or comment.

Chunk of the course material:
{chunk}
</span><span class="sh">"""</span>


<span class="k">class</span> <span class="nc">QAPair</span><span class="p">(</span><span class="n">BaseModel</span><span class="p">):</span>
    <span class="n">question</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="nc">Field</span><span class="p">(</span><span class="n">description</span><span class="o">=</span><span class="sh">"</span><span class="s">question generated from the given chunk</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">answer</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="nc">Field</span><span class="p">(</span><span class="n">description</span><span class="o">=</span><span class="sh">"</span><span class="s">the answer to the question</span><span class="sh">"</span><span class="p">)</span>


<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">"</span><span class="s">__main__</span><span class="sh">"</span><span class="p">:</span>
    <span class="k">assert</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">isdir</span><span class="p">(</span>
        <span class="n">args</span><span class="p">.</span><span class="n">output_dir</span>
    <span class="p">),</span> <span class="sa">f</span><span class="sh">"</span><span class="s">Output directory not found: </span><span class="si">{</span><span class="n">args</span><span class="p">.</span><span class="n">output_dir</span><span class="si">}</span><span class="sh">"</span>
    <span class="k">assert</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">isdir</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="n">chroma_dir</span><span class="p">),</span> <span class="sa">f</span><span class="sh">"</span><span class="s">Chroma db not found: </span><span class="si">{</span><span class="n">args</span><span class="p">.</span><span class="n">chroma_dir</span><span class="si">}</span><span class="sh">"</span>

    <span class="nf">load_dotenv</span><span class="p">()</span>
    <span class="n">db</span> <span class="o">=</span> <span class="nf">get_db</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="n">chroma_dir</span><span class="p">)</span>
    <span class="n">llm</span> <span class="o">=</span> <span class="c1"># your llm here
</span>    <span class="n">parser</span> <span class="o">=</span> <span class="nc">JsonOutputParser</span><span class="p">(</span><span class="n">pydantic_object</span><span class="o">=</span><span class="n">QAPair</span><span class="p">)</span>
    <span class="n">prompt</span> <span class="o">=</span> <span class="nc">PromptTemplate</span><span class="p">(</span>
        <span class="n">template</span><span class="o">=</span><span class="n">SYSTEM_PROMPT</span><span class="p">,</span>
        <span class="n">input_variables</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">chunk</span><span class="sh">"</span><span class="p">],</span>
        <span class="n">partial_variables</span><span class="o">=</span><span class="p">{</span><span class="sh">"</span><span class="s">format_instructions</span><span class="sh">"</span><span class="p">:</span> <span class="n">parser</span><span class="p">.</span><span class="nf">get_format_instructions</span><span class="p">()},</span>
    <span class="p">)</span>
    <span class="n">chain</span> <span class="o">=</span> <span class="n">prompt</span> <span class="o">|</span> <span class="n">llm</span> <span class="o">|</span> <span class="n">parser</span>

    <span class="n">data</span> <span class="o">=</span> <span class="n">db</span><span class="p">.</span><span class="nf">get</span><span class="p">()</span>

    <span class="k">if</span> <span class="n">args</span><span class="p">.</span><span class="n">limit</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
        <span class="n">n_chunks</span> <span class="o">=</span> <span class="n">args</span><span class="p">.</span><span class="n">limit</span>
        <span class="n">output_filename</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">"</span><span class="s">qa_dataset_limit=</span><span class="si">{</span><span class="n">n_chunks</span><span class="si">}</span><span class="s">.csv</span><span class="sh">"</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">n_chunks</span> <span class="o">=</span> <span class="nf">len</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="sh">"</span><span class="s">documents</span><span class="sh">"</span><span class="p">])</span>
        <span class="n">output_filename</span> <span class="o">=</span> <span class="sh">"</span><span class="s">qa_dataset.csv</span><span class="sh">"</span>

    <span class="n">dataset</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">question</span><span class="sh">"</span><span class="p">:</span> <span class="p">[],</span> <span class="sh">"</span><span class="s">ground_truth_answer</span><span class="sh">"</span><span class="p">:</span> <span class="p">[],</span> <span class="sh">"</span><span class="s">chunk_id</span><span class="sh">"</span><span class="p">:</span> <span class="p">[]}</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">tqdm</span><span class="p">(</span><span class="nf">range</span><span class="p">(</span><span class="n">n_chunks</span><span class="p">)):</span>
        <span class="n">chunk</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="sh">"</span><span class="s">documents</span><span class="sh">"</span><span class="p">][</span><span class="n">i</span><span class="p">]</span>
        <span class="n">output</span> <span class="o">=</span> <span class="n">chain</span><span class="p">.</span><span class="nf">invoke</span><span class="p">({</span><span class="sh">"</span><span class="s">chunk</span><span class="sh">"</span><span class="p">:</span> <span class="n">chunk</span><span class="p">})</span>
        <span class="n">dataset</span><span class="p">[</span><span class="sh">"</span><span class="s">question</span><span class="sh">"</span><span class="p">].</span><span class="nf">append</span><span class="p">(</span><span class="n">output</span><span class="p">[</span><span class="sh">"</span><span class="s">question</span><span class="sh">"</span><span class="p">])</span>
        <span class="n">dataset</span><span class="p">[</span><span class="sh">"</span><span class="s">ground_truth_answer</span><span class="sh">"</span><span class="p">].</span><span class="nf">append</span><span class="p">(</span><span class="n">output</span><span class="p">[</span><span class="sh">"</span><span class="s">answer</span><span class="sh">"</span><span class="p">])</span>
        <span class="n">dataset</span><span class="p">[</span><span class="sh">"</span><span class="s">chunk_id</span><span class="sh">"</span><span class="p">].</span><span class="nf">append</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="sh">"</span><span class="s">ids</span><span class="sh">"</span><span class="p">][</span><span class="n">i</span><span class="p">])</span>

    <span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nc">DataFrame</span><span class="p">(</span><span class="n">dataset</span><span class="p">)</span>
    <span class="n">df</span><span class="p">.</span><span class="nf">to_csv</span><span class="p">(</span><span class="nf">str</span><span class="p">(</span><span class="nc">Path</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="n">output_dir</span><span class="p">,</span> <span class="n">output_filename</span><span class="p">)),</span> <span class="n">index</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
</code></pre></div></div> <p>Find the full code example <a href="https://github.com/GTimothee/RAG_experiments/blob/main/test_procedure_for_rag/generate_qa_pairs.py">here</a>.</p> <p>In the following of the post I only use a test set, but of course you can split it into a validation set and a test set, ensuring that the proportion of each source document is approximately the same in each set.</p> <h2 id="step-2--procedures-pseudo-code">Step 2 — Procedure’s pseudo code</h2> <p>Without further delay, let’s have a look at the full test procedure:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">each</span> <span class="n">document</span>
  <span class="k">for</span> <span class="n">each</span> <span class="n">chunk</span> <span class="ow">in</span> <span class="n">the</span> <span class="n">document</span>
    <span class="c1"># 1- retrieve the answer from your system
</span>    <span class="n">run</span> <span class="n">your</span> <span class="n">RAG</span> <span class="n">system</span> <span class="n">on</span> <span class="n">the</span> <span class="n">question</span>
    <span class="n">gather</span> <span class="n">the</span> <span class="n">answer</span> <span class="ow">and</span> <span class="n">the</span> <span class="nb">list</span> <span class="n">of</span> <span class="n">chunks</span> <span class="n">retrieved</span> <span class="ow">and</span> <span class="n">used</span> <span class="k">as</span> <span class="n">context</span>
    
    <span class="c1"># 2- evaluate
</span>    <span class="n">compute</span> <span class="n">your</span> <span class="n">performance</span> <span class="n">metrics</span> <span class="n">of</span> <span class="n">the</span> <span class="n">whole</span> <span class="n">system</span> <span class="n">by</span> <span class="n">comparing</span> <span class="n">the</span> <span class="n">answer</span> <span class="ow">and</span> <span class="n">the</span> <span class="n">ground_truth</span>
    <span class="n">compute</span> <span class="n">your</span> <span class="n">rag</span> <span class="n">performance</span> <span class="n">by</span> <span class="n">saving</span> <span class="n">the</span> <span class="n">rank</span> <span class="n">of</span> <span class="n">the</span> <span class="n">target</span> <span class="n">context</span> <span class="ow">in</span> <span class="n">the</span> <span class="n">contexts</span> <span class="nb">list</span> <span class="n">that</span> <span class="n">has</span> <span class="n">been</span> <span class="n">retrieved</span> <span class="n">by</span> <span class="n">your</span> <span class="n">system</span><span class="p">.</span> <span class="n">If</span> <span class="n">the</span> <span class="n">target</span> <span class="n">context</span> <span class="ow">is</span> <span class="ow">not</span> <span class="n">there</span><span class="p">,</span> <span class="n">the</span> <span class="n">rank</span> <span class="ow">is</span> <span class="nb">set</span> <span class="n">to</span> <span class="bp">None</span> <span class="ow">or</span> <span class="n">something</span> <span class="n">equivalent</span><span class="p">.</span>
    <span class="n">Save</span> <span class="n">everything</span> <span class="k">as</span> <span class="n">a</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">a</span> <span class="n">csv</span> <span class="nb">file</span>
</code></pre></div></div> <p>That’s it. You get a csv file as output with all the data you need, you can now compute statistics like the completeness, conciseness and ranking distributions, the %match, %misses. A nice to have is to compute statistics per document (add a column to the csv file with the index or the name of the document).</p> <p>Here is an interpretation of the first part of the peudocode, to generate answers from the dataset:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">rag_chain</span><span class="p">,</span> <span class="n">retriever</span><span class="p">,</span> <span class="n">db</span> <span class="o">=</span> <span class="nf">get_rag_chain_eval</span><span class="p">(</span><span class="n">chroma_db_dirpath</span><span class="o">=</span><span class="n">path_to_your_db</span><span class="p">)</span>
<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">read_csv</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="n">dataset_filepath</span><span class="p">)</span>
<span class="n">outputs</span> <span class="o">=</span> <span class="p">{</span>
    <span class="sh">'</span><span class="s">answers</span><span class="sh">'</span><span class="p">:</span> <span class="p">[],</span> <span class="sh">'</span><span class="s">ranks</span><span class="sh">'</span><span class="p">:</span> <span class="p">[]</span>
<span class="p">}</span>

<span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="nf">tqdm</span><span class="p">(</span><span class="n">df</span><span class="p">.</span><span class="nf">itertuples</span><span class="p">(),</span> <span class="n">total</span><span class="o">=</span><span class="nf">len</span><span class="p">(</span><span class="n">df</span><span class="p">),</span> <span class="n">desc</span><span class="o">=</span><span class="sh">'</span><span class="s">Generating answers...</span><span class="sh">'</span><span class="p">):</span>
    <span class="n">documents</span> <span class="o">=</span> <span class="n">retriever</span><span class="p">.</span><span class="nf">invoke</span><span class="p">(</span><span class="n">row</span><span class="p">.</span><span class="n">question</span><span class="p">)</span>

    <span class="c1"># generate answer
</span>    <span class="n">output</span> <span class="o">=</span> <span class="n">rag_chain</span><span class="p">.</span><span class="nf">invoke</span><span class="p">({</span>
        <span class="sh">"</span><span class="s">question</span><span class="sh">"</span><span class="p">:</span> <span class="n">row</span><span class="p">.</span><span class="n">question</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">context</span><span class="sh">"</span><span class="p">:</span> <span class="sh">'</span><span class="se">\n</span><span class="sh">'</span><span class="p">.</span><span class="nf">join</span><span class="p">([</span><span class="n">doc</span><span class="p">.</span><span class="n">page_content</span> <span class="k">for</span> <span class="n">doc</span> <span class="ow">in</span> <span class="n">documents</span><span class="p">])</span>
    <span class="p">})</span>
    <span class="n">outputs</span><span class="p">[</span><span class="sh">'</span><span class="s">answers</span><span class="sh">'</span><span class="p">].</span><span class="nf">append</span><span class="p">(</span><span class="n">output</span><span class="p">)</span>

    <span class="c1"># compute rank of the target documents in the list of retrieved documents
</span>    <span class="n">target_chunk</span> <span class="o">=</span> <span class="n">db</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">row</span><span class="p">.</span><span class="n">chunk_id</span><span class="p">)[</span><span class="sh">'</span><span class="s">documents</span><span class="sh">'</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span>
    <span class="n">rank</span> <span class="o">=</span> <span class="bp">None</span>
    <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">chunk</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">documents</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">chunk</span><span class="p">.</span><span class="n">page_content</span> <span class="o">==</span> <span class="n">target_chunk</span><span class="p">:</span>
            <span class="n">rank</span> <span class="o">=</span> <span class="n">i</span>
    <span class="n">outputs</span><span class="p">[</span><span class="sh">'</span><span class="s">ranks</span><span class="sh">'</span><span class="p">].</span><span class="nf">append</span><span class="p">(</span><span class="n">rank</span><span class="p">)</span>

<span class="n">pd</span><span class="p">.</span><span class="nc">DataFrame</span><span class="p">(</span><span class="n">outputs</span><span class="p">).</span><span class="nf">to_csv</span><span class="p">(</span>
    <span class="nf">str</span><span class="p">(</span><span class="nc">Path</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="n">output_dir</span><span class="p">,</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="nc">Path</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="n">dataset_filepath</span><span class="p">).</span><span class="n">stem</span><span class="si">}</span><span class="sh">"</span> <span class="o">+</span> <span class="sh">"</span><span class="s">_answers.csv</span><span class="sh">"</span><span class="p">)),</span> <span class="n">index</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
</code></pre></div></div> <p>You can find the full code <a href="https://github.com/GTimothee/RAG_experiments/blob/main/test_procedure_for_rag/generate_answers.py">here</a></p> <p>Below is an interpretation of the second part of the pseudocode, to evaluate the answers. I use two metrics, completeness and conciseness to evaluate the RAG answers.</p> <p>Completeness evaluates whether or not the answer answers the question, while conciseness answers the question “how much of the answer is actually relevant”. If the completeness is low, then the system had trouble retrieving the relevant documents. If the conciseness is low, and the completeness is high, you are retrieving too much documents. So try to focus on improving the rank of the target document in the set of retrieved documents so that you can reduce the number of documents retrieved and reduce the noise. You could also add a reranker, which is probably a good idea in any RAG system.</p> <p>Additional comments about the evaluation prompt:</p> <ul> <li>I tried adding some other keys like ‘comments’ or ‘reasons’ to leverage the idea of chain of thoughts, but it did not provide any useful information</li> <li>I use floats here, but it may be that using integers from 1 to 10 instead would be more efficient or precise.</li> </ul> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">SYSTEM_PROMPT</span> <span class="o">=</span> <span class="sh">"""</span><span class="s">You are a top-tier grading software belonging to a school.
Your task is to give a grade to evaluate the answer goodness to a given question, given the ground truth answer.

You will be given a piece of data containing: 
- a </span><span class="sh">'</span><span class="s">question</span><span class="sh">'</span><span class="s">
- an </span><span class="sh">'</span><span class="s">answer</span><span class="sh">'</span><span class="s">: the answer to the question from the student
- a </span><span class="sh">'</span><span class="s">ground truth answer</span><span class="sh">'</span><span class="s">: the expected answer to the question

Provide your answer as a JSON with two keys: 
- </span><span class="sh">'</span><span class="s">completeness</span><span class="sh">'</span><span class="s">: A float between 0 and 1. The percentage of the ground truth answer that is present in the student</span><span class="sh">'</span><span class="s">s answer. A score of 1 means that all the information in the </span><span class="sh">'</span><span class="s">ground truth answer</span><span class="sh">'</span><span class="s"> can be found in the </span><span class="sh">'</span><span class="s">answer</span><span class="sh">'</span><span class="s">. No matter if the answer contains more information than expected. A score of 0 means that no information present in the </span><span class="sh">'</span><span class="s">ground truth answer</span><span class="sh">'</span><span class="s"> can be found in the </span><span class="sh">'</span><span class="s">answer</span><span class="sh">'</span><span class="s">.
- </span><span class="sh">'</span><span class="s">conciseness</span><span class="sh">'</span><span class="s">: A float between 0 and 1. The percentage of the answer that is part of the ground truth. Conciseness measures how much of the answer is really useful.

Here is the data to evaluate: 
- </span><span class="sh">'</span><span class="s">question</span><span class="sh">'</span><span class="s">: {question}
- </span><span class="sh">'</span><span class="s">answer</span><span class="sh">'</span><span class="s">: {answer}
- </span><span class="sh">'</span><span class="s">ground truth answer</span><span class="sh">'</span><span class="s">: {ground_truth_answer}

Provide your answer as a JSON, with no additional text.
</span><span class="sh">"""</span>


<span class="k">class</span> <span class="nc">Evaluation</span><span class="p">(</span><span class="n">BaseModel</span><span class="p">):</span>
    <span class="n">completeness</span><span class="p">:</span> <span class="nb">float</span> <span class="o">=</span> <span class="nc">Field</span><span class="p">(</span><span class="n">description</span><span class="o">=</span><span class="sh">"</span><span class="s">A float between 0 and 1. The percentage of the ground truth answer that is present in the student</span><span class="sh">'</span><span class="s">s answer. A score of 1 means that all the information in the </span><span class="sh">'</span><span class="s">ground truth answer</span><span class="sh">'</span><span class="s"> can be found in the </span><span class="sh">'</span><span class="s">answer</span><span class="sh">'</span><span class="s">. No matter if the answer contains more information than expected. A score of 0 means that no information present in the </span><span class="sh">'</span><span class="s">ground truth answer</span><span class="sh">'</span><span class="s"> can be found in the </span><span class="sh">'</span><span class="s">answer</span><span class="sh">'</span><span class="s">.</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">conciseness</span><span class="p">:</span> <span class="nb">float</span> <span class="o">=</span> <span class="nc">Field</span><span class="p">(</span><span class="n">description</span><span class="o">=</span><span class="sh">"</span><span class="s">A float between 0 and 1. The percentage of the answer that is part of the ground truth. Conciseness measures how much of the answer is really useful.</span><span class="sh">"</span><span class="p">)</span>


<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">"</span><span class="s">__main__</span><span class="sh">"</span><span class="p">:</span>

    <span class="nf">load_dotenv</span><span class="p">()</span>

    <span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">concat</span><span class="p">([</span>
        <span class="n">pd</span><span class="p">.</span><span class="nf">read_csv</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="n">dataset_filepath</span><span class="p">),</span>
        <span class="n">pd</span><span class="p">.</span><span class="nf">read_csv</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="n">answers_filepath</span><span class="p">)</span>
    <span class="p">],</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>

    <span class="n">llm</span> <span class="o">=</span> <span class="nc">OpenAI</span><span class="p">(</span>
        <span class="n">openai_api_base</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">OPENAI_BASE_URL</span><span class="sh">"</span><span class="p">),</span>
        <span class="n">openai_api_key</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">OPENAI_API_KEY</span><span class="sh">"</span><span class="p">),</span>
        <span class="n">model_name</span><span class="o">=</span><span class="sh">"</span><span class="s">Llama-3-70B-Instruct</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">temperature</span><span class="o">=</span><span class="mf">0.0</span><span class="p">,</span>
    <span class="p">)</span>
    <span class="n">parser</span> <span class="o">=</span> <span class="nc">JsonOutputParser</span><span class="p">(</span><span class="n">pydantic_object</span><span class="o">=</span><span class="n">Evaluation</span><span class="p">)</span>
    <span class="n">prompt</span> <span class="o">=</span> <span class="nc">PromptTemplate</span><span class="p">(</span>
        <span class="n">template</span><span class="o">=</span><span class="n">SYSTEM_PROMPT</span><span class="p">,</span>
        <span class="n">input_variables</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">question</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">answer</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">ground_truth_answer</span><span class="sh">"</span><span class="p">],</span>
        <span class="n">partial_variables</span><span class="o">=</span><span class="p">{</span><span class="sh">"</span><span class="s">format_instructions</span><span class="sh">"</span><span class="p">:</span> <span class="n">parser</span><span class="p">.</span><span class="nf">get_format_instructions</span><span class="p">()},</span>
    <span class="p">)</span>
    <span class="n">chain</span> <span class="o">=</span> <span class="n">prompt</span> <span class="o">|</span> <span class="n">llm</span> <span class="o">|</span> <span class="n">parser</span>

    <span class="n">conciseness</span><span class="p">,</span> <span class="n">completeness</span> <span class="o">=</span> <span class="mf">0.</span><span class="p">,</span> <span class="mf">0.</span>
    <span class="n">ranks</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="nf">tqdm</span><span class="p">(</span><span class="n">df</span><span class="p">.</span><span class="nf">itertuples</span><span class="p">(),</span> <span class="n">total</span><span class="o">=</span><span class="nf">len</span><span class="p">(</span><span class="n">df</span><span class="p">),</span> <span class="n">desc</span><span class="o">=</span><span class="sh">'</span><span class="s">Evaluating answers...</span><span class="sh">'</span><span class="p">):</span>
        <span class="n">output</span> <span class="o">=</span> <span class="n">chain</span><span class="p">.</span><span class="nf">invoke</span><span class="p">({</span>
            <span class="sh">"</span><span class="s">question</span><span class="sh">"</span><span class="p">:</span> <span class="n">row</span><span class="p">.</span><span class="n">question</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">answer</span><span class="sh">"</span><span class="p">:</span> <span class="n">row</span><span class="p">.</span><span class="n">answers</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">ground_truth_answer</span><span class="sh">"</span><span class="p">:</span> <span class="n">row</span><span class="p">.</span><span class="n">ground_truth_answer</span>
        <span class="p">})</span>
        <span class="n">completeness</span> <span class="o">+=</span> <span class="n">output</span><span class="p">[</span><span class="sh">'</span><span class="s">completeness</span><span class="sh">'</span><span class="p">]</span>
        <span class="n">conciseness</span> <span class="o">+=</span> <span class="n">output</span><span class="p">[</span><span class="sh">'</span><span class="s">conciseness</span><span class="sh">'</span><span class="p">]</span>
        <span class="n">ranks</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">row</span><span class="p">.</span><span class="n">ranks</span><span class="p">)</span>
    
    <span class="n">mean_conciseness</span> <span class="o">=</span> <span class="n">conciseness</span> <span class="o">/</span> <span class="nf">len</span><span class="p">(</span><span class="n">df</span><span class="p">)</span>
    <span class="n">mean_completeness</span> <span class="o">=</span> <span class="n">completeness</span> <span class="o">/</span> <span class="nf">len</span><span class="p">(</span><span class="n">df</span><span class="p">)</span>

    <span class="nf">print</span><span class="p">({</span>
        <span class="sh">"</span><span class="s">mean_completeness</span><span class="sh">"</span><span class="p">:</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="nf">round</span><span class="p">(</span><span class="n">mean_completeness</span><span class="o">*</span><span class="mi">100</span><span class="p">)</span><span class="si">}</span><span class="s"> %</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">mean_conciseness</span><span class="sh">"</span><span class="p">:</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="nf">round</span><span class="p">(</span><span class="n">mean_conciseness</span><span class="o">*</span><span class="mi">100</span><span class="p">)</span><span class="si">}</span><span class="s"> %</span><span class="sh">"</span>
    <span class="p">})</span>

    <span class="nf">print</span><span class="p">(</span><span class="n">pd</span><span class="p">.</span><span class="nc">Series</span><span class="p">(</span><span class="n">ranks</span><span class="p">).</span><span class="nf">value_counts</span><span class="p">())</span>
</code></pre></div></div> <p>Again, the full code is <a href="https://github.com/GTimothee/RAG_experiments/blob/main/test_procedure_for_rag/evaluate.py">here</a></p> <h2 id="disclaimer-it-is-for-qa-evaluation">Disclaimer: It is for Q/A evaluation</h2> <p>By Q/A evaluation I mean that each question of the test set is associated to (and can be answered with) one document chunk. Consequently, this evaluation procedure is for Q/A RAG only; Indeed, if you are looking for an answer for which you must gather data from multiple chunks, this procedure would not evaluate that. Still, I believe it is a good starting point when evaluating your RAG, as if you cannot reliably find one document chunk, how could you find multiple target document chunks? You could probably start with this procedure and then add another procedure for more complex use cases.</p> <h2 id="sources">Sources</h2> <p>To write the examples of this blog post, I relied on these two pages:</p> <ul> <li>https://huggingface.co/learn/cookbook/en/advanced_rag</li> <li>https://python.langchain.com/docs/tutorials/rag/#retrieval-and-generation-generate</li> </ul> <h2 id="conclusion">Conclusion</h2> <p>Now you have a pretty good idea of how your RAG app performs. Now every time you want to add a document to the knowledge base, add it to the dataset and run the test. You will know how much the addition of the new chunks in the database interferes with the existing documents, and what is the performance of your RAG system on your new document.</p> <p>Medium link: https://medium.com/@timothee.guedon/simple-test-procedure-and-metrics-for-your-rag-in-5-minutes-a86b329a5f7a</p>]]></content><author><name></name></author><category term="rag"/><category term="llm"/><category term="rag"/><category term="evaluation"/><category term="procedure"/><category term="metrics"/><summary type="html"><![CDATA[Simple test procedure and metrics for your RAG in 5 minutes]]></summary></entry></feed>